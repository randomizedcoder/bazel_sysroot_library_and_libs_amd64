{ lib, writeText }:

let
  # Function to generate a filegroup for a file
  mkFilegroup = path: name: ''
    filegroup(
      name = "${name}",
      srcs = ["${path}"],
      visibility = ["//visibility:public"],
    )
  '';

  # Function to generate a cc_import for a library
  mkCcImport = path: name: ''
    cc_import(
      name = "${name}",
      ${if lib.hasSuffix ".o" path then "objects" else if lib.hasSuffix ".a" path then "static_library" else "shared_library"} = "${path}",
      visibility = ["//visibility:public"],
    )
  '';

  # Function to traverse a directory and generate rules
  traverseDir = dir: prefix: let
    entries = builtins.attrNames (builtins.readDir dir);
    rules = builtins.concatStringsSep "\n" (map (entry: let
      path = "${dir}/${entry}";
      name = "${prefix}_${builtins.replaceStrings ["/" "."] ["_" "_"] entry}";
    in
      if builtins.pathExists path && builtins.pathIsDirectory path then
        traverseDir path name
      else if lib.hasSuffix ".o" entry || lib.hasSuffix ".a" entry || lib.hasSuffix ".so" entry then
        mkFilegroup path name + "\n" + mkCcImport path name
      else
        ""
    ) entries);
  in rules;

  # Generate the BUILD.bazel content
  buildBazel = ''
    # Auto-generated by Nix
    ${traverseDir ./sysroot "sysroot"}
  '';
in
writeText "BUILD.bazel" buildBazel