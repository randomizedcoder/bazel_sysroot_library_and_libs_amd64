#
# BUILD.bazel
#

package(default_visibility = ["//visibility:public"])

# Startup files (use objects, not static_library)
cc_import(
    name = "crt1",
    objects = ["lib/Scrt1.o"],
)

cc_import(
    name = "crti",
    objects = ["lib/crti.o"],
)

cc_import(
    name = "crtbegin",
    objects = ["lib/gcc/x86_64-unknown-linux-gnu/14.2.1/crtbeginS.o"],
)

cc_import(
    name = "crtend",
    objects = ["lib/gcc/x86_64-unknown-linux-gnu/14.2.1/crtendS.o"],
)

cc_import(
    name = "crtn",
    objects = ["lib/crtn.o"],
)

# Core C/C++ libraries
cc_import(
    name = "libc",
    static_library = "lib/libc.a",
)

cc_import(
    name = "libstdc++",
    static_library = "lib/libstdc++.a",
    shared_library = "lib/libstdc++.so",
)

cc_import(
    name = "libgcc",
    static_library = "lib/gcc/x86_64-unknown-linux-gnu/14.2.1/libgcc.a",
)

cc_import(
    name = "libgcc_s",
    shared_library = "lib/libgcc_s.so",
)

cc_import(
    name = "libm",
    static_library = "lib/libm.a",
)

cc_import(
    name = "libpthread",
    static_library = "lib/libpthread.a",
    shared_library = "lib/libpthread.so",
)

cc_import(
    name = "libdl",
    static_library = "lib/libdl.a",
    shared_library = "lib/libdl.so",
)

cc_import(
    name = "librt",
    static_library = "lib/librt.a",
    shared_library = "lib/librt.so",
)

cc_import(
    name = "libutil",
    static_library = "lib/libutil.a",
    shared_library = "lib/libutil.so",
)

cc_import(
    name = "libresolv",
    static_library = "lib/libresolv.a",
    shared_library = "lib/libresolv.so",
)

cc_import(
    name = "libanl",
    static_library = "lib/libanl.a",
    shared_library = "lib/libanl.so",
)

# Compression libraries
cc_import(
    name = "libz",
    static_library = "lib/libz.a",
    shared_library = "lib/libz.so",
)

# XML and parsing
cc_import(
    name = "libxml2",
    shared_library = "lib/libxml2.so",
)

cc_import(
    name = "libexpat",
    shared_library = "lib/libexpat.so",
)

# Networking
cc_import(
    name = "libssl",
    shared_library = "lib/libssl.so",
)

cc_import(
    name = "libcrypto",
    shared_library = "lib/libcrypto.so",
)

cc_import(
    name = "libcurl",
    shared_library = "lib/libcurl.so",
)

# Text processing
cc_import(
    name = "libpcre",
    shared_library = "lib/libpcre.so",
)

cc_import(
    name = "libpcre2-8",
    shared_library = "lib/libpcre2-8.so",
)

cc_import(
    name = "libpcre2-16",
    shared_library = "lib/libpcre2-16.so",
)

cc_import(
    name = "libpcre2-32",
    shared_library = "lib/libpcre2-32.so",
)

cc_import(
    name = "libpcre2-posix",
    shared_library = "lib/libpcre2-posix.so",
)

# JSON
cc_import(
    name = "libjansson",
    shared_library = "lib/libjansson.so",
)

# Database
cc_import(
    name = "libsqlite3",
    shared_library = "lib/libsqlite3.so",
)

# Image processing
cc_import(
    name = "libpng",
    shared_library = "lib/libpng16.so",
)

cc_import(
    name = "libjpeg",
    shared_library = "lib/libjpeg.so",
)

# Sanitizer libraries
cc_import(
    name = "libasan",
    shared_library = "lib/libasan.so",
)

cc_import(
    name = "libtsan",
    shared_library = "lib/libtsan.so",
)

cc_import(
    name = "libubsan",
    shared_library = "lib/libubsan.so",
)

cc_import(
    name = "liblsan",
    shared_library = "lib/liblsan.so",
)

cc_import(
    name = "libhwasan",
    shared_library = "lib/libhwasan.so",
)

# Other libraries
cc_import(
    name = "libquadmath",
    shared_library = "lib/libquadmath.so",
)

cc_import(
    name = "libatomic",
    shared_library = "lib/libatomic.so",
)

cc_import(
    name = "libitm",
    shared_library = "lib/libitm.so",
)

cc_import(
    name = "libssp",
    shared_library = "lib/libssp.so",
)

cc_import(
    name = "libgomp",
    shared_library = "lib/libgomp.so",
)

# Usr directory filegroup
filegroup(
    name = "sysroot",
    srcs = glob([
        "include/**",
        "lib/**",
    ]),
)

# Include directory filegroup
filegroup(
    name = "include",
    srcs = glob(["include/**"]),
)

# Library directory filegroup
filegroup(
    name = "lib",
    srcs = glob(["lib/**"]),
)

# end